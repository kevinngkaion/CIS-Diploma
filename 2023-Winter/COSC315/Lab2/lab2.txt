Author: Kevin Ngkaion
OC#: 300325759
Date: Feb 2, 2023

COSC315 Lab 2

1. The call of system() does not overwrite the original process. As you can see in my program, the printf() function happens after the system() call.
   In the output, the printf() statement runs and the statement is printed, which means that the system() call did not overwrite the original process.

    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    int main() {
    // Question 1
        system("whoami");
        printf("This happens after the system command is called\n");
        return 0;
    }

2. The call of execl() overwrites the original process. In my program, the printf() function happens after the execl() call. In the output, we only get the
   result of the execl() call but the printf() statement does not run.

    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    int main() {
        // Question 2
        execl("/usr/bin/whoami", "whoami", NULL);
        printf("This happens after the system command is called\n");
        return 0;
    }

3. After removing the fflush() call and then running the program again, the output in the terminal was the same as the original program, where "Before fork"
   only appears once. However, when we redirect the output of the program to a file, we can see that the file has "Before fork" printed twice. 

    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    int main() {
    // Question 3
        int x = 5;
        printf("Before fork\n");
        //fflush(stdout);
        fork();
        printf("The value of x is %d\n", x);
        return 0;
    }


4.
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    int main() {
        // Question 4
        int pid;
        pid = fork();
        if(pid == 0){
            printf("CHILD PROCESS:\nMy PID is: %d\nMy parent's PID is: %d\nI do not have a child\n\n", getpid(), getppid());
            return 0;
        }
        printf("ORIGINAL PROCESS:\nMy PID is: %d\nMy parent's PID is: %d\nMy child's PID is: %d\n\n", getpid(), getppid(), pid);
        return 0;
    }

5. p[0] is 3 and p[1] is 4 for both the parent and child processes.
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    int main() {
    // Question 5
        int pid, p[2];
        pipe(p);
        pid = fork();
        if(pid == 0){
            printf("CHILD PROCESS:\np[0] is %d AND p[1] is %d\n", p[0], p[1]);
            return 0;
        }
        printf("PARENT PROCESS:\np[0] is %d AND p[1] is %d\n", p[0], p[1]);
        return 0;
    }
    OUTPUT:
    PARENT PROCESS:
    p[0] is 3 AND p[1] is 4
    CHILD PROCESS:
    p[0] is 3 AND p[1] is 4

6. 
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <string.h>
    int main() {
    // Question 5
        char* buff = (char*)malloc(128*sizeof(char));
        int pid, p1[2], p2[2];
        pipe(p1);
        pipe(p2);
        pid = fork();
        if(pid == 0){
            //reading parent's message
            read(p1[0], buff, 128);
            printf("Parent said: %s\n",buff);
            sprintf(buff, "%s", "Almost. How did the Vikings send secret message?");
            //writing child's response
            write(p2[1], buff, strlen(buff)+1);
            //reading parent's response
            read(p1[0], buff, 128);
            printf("Parent response: %s\n", buff);
            return 0;
        }
        sprintf(buff, "%s", "Have you finished your history homework?");
        //parent writing initial message
        write(p1[1], buff, strlen(buff)+1);
        //reading child's response
        read(p2[0], buff, 128);
        printf("Child response: %s\n", buff);
        sprintf(buff, "%s", "I think it was by Norse Code");
        //writing response back to child
        write(p1[1], buff, strlen(buff)+1);
        return 0;
    }

7. The output of the program was:

    x = 88888, Address of x = 0x7fff607c791c

    In child: x = 12345, Address of x = 0x7fff607c791c
    The child process is ending.

    In parent: x = 88888, Address of x = 0x7fff607c791c
    The parent process is ending.

    It does appear that the memory memory location of x is storing two different values. I think that this is because when the fork() function is called,
    the system allocates new physical addresses to the child process. Even though the memory location of x is the same in both the parent and the child
    processes, their physical addresses are actually different.